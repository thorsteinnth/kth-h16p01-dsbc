
A sends message M to B
A logs M
B receives M
B logs M

A logs M must happen before B logs

Test run

log: na john {received,{hello,78}}
log: na ringo {sending,{hello,79}}
log: na paul {sending,{hello,24}}
log: na george {sending,{hello,78}}

There is no way to differentiate between the sent message and the received message except for the random number
in the message.

Can see that john received message 78 before george sent message 78

TODO: Experiment with the jitter and see if you can increase or decrease (eliminate?) the number of entries that are wrong.

Lamport time:

log: 1437 george {received,{hello,7}}
log: 1437 paul {sending,{hello,43}}
log: 1436 john {sending,{hello,7}}

Here we have the same message (random number 7).
Received before it is sent.
Lamport clocks give us partial order, so we can see that this message sending event (message 7) is out of order in the logger.

TODO: What is always true and what is sometimes true? How do you play it safe?

This isn't total ordering, so I can't just print out in increasing time from the logger.
If A and B just send to each other, and C and D just send to each other, they will have different times.
The logger can't know if a message from A or B should be printed before a message from C or D, since the messages
from each process do not contain info on the state of the entire system (i.e. the sending process' view of the system).
The initial clock in the logger (dealing with lamport time from the workers) then has to look at each process individually.
Have a clock for each process.

If we receive all messages before printing them out, put them in a queue and order the queue by time,
I will be guaranteed that every pair of send-receive messages in the correct order (but this would of course not be
a total ordering, only ordered pairwise).

But I want to print this out as we go, can't wait for all messages.

NOPE
I maintain a clock with the timestamps of the last received messages from all workers.
If the largest timestamp from process A is 100, then I know I can print all messages from A that have a smaller timestamp
than 100 (clearing the pipe so to speak), because between two processes (logger and A) we have a FIFO channel.
NOPE ... will always have a FIFO order between two processes so this does nothing to help me. Could just print messages
from A out and they would be in order because of the FIFO channel.
NOPE

-------------------------------

Keep the queue ordered.
If I check if the message has a time <= the smallest of all the time stamps in the clock.
Don't know where the send message that we are trying to log was sent.

Recipient larger:
A at time 10
A at time 11, send message with 11 to B
A logs message with time 11
B at time 20, receives message, time now 21
B logs message with time 21

-> Recipient time stamp larger than sender

Recipient smaller:
A at time 10
A at time 11, send message with 11 to B
A logs message with time 11
B at time 6, receives message, time now max(6,11) + 1 = 12
B logs message with time 12

-> Recipient time stamp larger than sender

-------------------------------

If I was only dealing with two processes:
A sends message
A logs message
B receives message
B logs message
-> A must log before B

A at time 10
A at time 11, send message with 11 to B
A sends log request for message 11

B at time 20, receives message, time now 21
B sends log request for message 21

Logger receives log request from B for message 21
Cannot log it yet!
When am I sure that I can log it?
Let's say largest time logged from A is 10
Need clock for A to be >= 21 ... then I can be sure that there is no message from A still on its way
(because the receiver time will always be larger than the sender time)

So I can log the message from B if the time on it is <= the clock time of A.

When I am dealing with multiple processes, I do not know who is the receiver of the message.
Therefore I can only log the message when the time on it is <= the clock time for all the OTHER processes
(or just check all processes, the clock time for the process that requested the log will be >= than the time on the
message that we are trying to log).

A at time 10
A at time 11, send message with 11 to B
B at time 10, receives message with 11, B at time 12

A sends log request for message 11
B sends log request for message 12
Cannot log B until A has sent log request for message 12 or higher, will never log anything unless A requests a log
for another message
-> Some messages will never be logged
-> OK to print the rest of the hold back queue þegar maður drepur loggerinn?

EÐA

Should be able to log B (12) when A has sent a log request for message 11.
Safe to log 12 when (12-1) is less than or equal to 11.

Er þetta frekar að það er safe að logga tíma ef time-1 er less than or equal to all clocktimes?

A er í 10
Sendir message með 11 til B
Loggar message 11
B er í 5
Fær message með 11 frá A, fer í max(11,5)+1 = 12
Loggar message 12

Má ekki skrifa message 12 í logginn fyrr en ég er búinn að logga message 11
Má bara skrifa message þegar 12 er less than or equal to all clock times - s.s. þarf að láta A logga message 12
(sem er ótengt fyrra message sending atburðinum, og gerist kannski aldrei)
NOPE
Má skrifa 12 í logginn þegar það er búið að logga 11, þannig að ég get loggað 12 þegar (12-1) er less than or equal to
all clocktimes
% Can log time 12 when I have received time 11 from all -> (12-1) <= 11

---------------------------------

Er að lenda í massífu veseni við að smíða lista af logged LogRequests í sama falli og ég er að logga ...
Búa til lista yfir þau sem eru logguð, þegar það er verið að logga þau,
eða remove-a logguðu úr spes lista þegar ég er að logga þau.
Enda með að henda þessu í tvö föll.

---------------------------------

Run after adding lamport clocks:

log: 1334 john {sending,{hello,72}}
log: 1335 george {received,{hello,92}}
log: 1335 paul {sending,{hello,87}}
log: 1336 george {received,{hello,96}}
log: 1336 john {received,{hello,87}}
log: 1336 paul {sending,{hello,70}}
log: 1337 george {received,{hello,72}}

john sends 72 at time 1334 (to george evidently)
george receives 2 messages in the meantime, george is at 1336 now
then george receives the message 72 and goes to 1337

The log is ordered by time!

When we stop the logger we still have some messages in the queue
We just log the remains from the queue one by one (queue is ordered).