
A sends message M to B
A logs M
B receives M
B logs M

A logs M must happen before B logs

Test run

log: na john {received,{hello,78}}
log: na ringo {sending,{hello,79}}
log: na paul {sending,{hello,24}}
log: na george {sending,{hello,78}}

There is no way to differentiate between the sent message and the received message except for the random number
in the message.

Can see that john received message 78 before george sent message 78

TODO: Experiment with the jitter and see if you can increase or decrease (eliminate?) the number of entries that are wrong.

Lamport time:

log: 1437 george {received,{hello,7}}
log: 1437 paul {sending,{hello,43}}
log: 1436 john {sending,{hello,7}}

Here we have the same message (random number 7).
Received before it is sent.
Lamport clocks give us partial order, so we can see that this message sending event (message 7) is out of order in the logger.

TODO: What is always true and what is sometimes true? How do you play it safe?

This isn't total ordering, so I can't just print out in increasing time from the logger.
If A and B just send to each other, and C and D just send to each other, they will have different times.
The logger can't know if a message from A or B should be printed before a message from C or D, since the messages
from each process do not contain info on the state of the entire system (i.e. the sending process' view of the system).
The initial clock in the logger (dealing with lamport time from the workers) then has to look at each process individually.
Have a clock for each process.

If we receive all messages before printing them out, put them in a queue and order the queue by time,
I will be guaranteed that every pair of send-receive messages in the correct order (but this would of course not be
a total ordering, only ordered pairwise).

But I want to print this out as we go, can't wait for all messages.

NOPE
I maintain a clock with the timestamps of the last received messages from all workers.
If the largest timestamp from process A is 100, then I know I can print all messages from A that have a smaller timestamp
than 100 (clearing the pipe so to speak), because between two processes (logger and A) we have a FIFO channel.
NOPE ... will always have a FIFO order between two processes so this does nothing to help me. Could just print messages
from A out and they would be in order because of the FIFO channel.
NOPE

-------------------------------

Keep the queue ordered.
If I check if the message has a time <= the smallest of all the time stamps in the clock.
Don't know where the send message that we are trying to log was sent.

Recipient larger:
A at time 10
A at time 11, send message with 11 to B
A logs message with time 11
B at time 20, receives message, time now 21
B logs message with time 21

-> Recipient time stamp larger than sender

Recipient smaller:
A at time 10
A at time 11, send message with 11 to B
A logs message with time 11
B at time 6, receives message, time now max(6,11) + 1 = 12
B logs message with time 12

-> Recipient time stamp larger than sender

-------------------------------

If I was only dealing with two processes:
A sends message
A logs message
B receives message
B logs message
-> A must log before B

A at time 10
A at time 11, send message with 11 to B
A sends log request for message 11

B at time 20, receives message, time now 21
B sends log request for message 21

Logger receives log request from B for message 21
Cannot log it yet!
When am I sure that I can log it?
Let's say largest time logged from A is 10
Need clock for A to be >= 21 ... then I can be sure that there is no message from A still on its way
(because the receiver time will always be larger than the sender time)

So I can log the message from B if the time on it is <= the clock time of A.

When I am dealing with multiple processes, I do not know who is the receiver of the message.
Therefore I can only log the message when the time on it is <= the clock time for all the OTHER processes
(or just check all processes, the clock time for the process that requested the log will be >= than the time on the
message that we are trying to log).

A at time 10
A at time 11, send message with 11 to B
B at time 10, receives message with 11, B at time 12

A sends log request for message 11
B sends log request for message 12
Cannot log B until A has sent log request for message 12 or higher, will never log anything unless A requests a log
for another message
-> Some messages will never be logged
-> OK to print the rest of the hold back queue þegar maður drepur loggerinn?

EÐA

Should be able to log B (12) when A has sent a log request for message 11.
Safe to log 12 when (12-1) is less than or equal to 11.

Er þetta frekar að það er safe að logga tíma ef time-1 er less than or equal to all clocktimes?

A er í 10
Sendir message með 11 til B
Loggar message 11
B er í 5
Fær message með 11 frá A, fer í max(11,5)+1 = 12
Loggar message 12

Má ekki skrifa message 12 í logginn fyrr en ég er búinn að logga message 11
Má bara skrifa message þegar 12 er less than or equal to all clock times - s.s. þarf að láta A logga message 12
(sem er ótengt fyrra message sending atburðinum, og gerist kannski aldrei)
NOPE
Má skrifa 12 í logginn þegar það er búið að logga 11, þannig að ég get loggað 12 þegar (12-1) er less than or equal to
all clocktimes
% Can log time 12 when I have received time 11 from all -> (12-1) <= 11

---------------------------------

Er að lenda í massífu veseni við að smíða lista af logged LogRequests í sama falli og ég er að logga ...
Búa til lista yfir þau sem eru logguð, þegar það er verið að logga þau,
eða remove-a logguðu úr spes lista þegar ég er að logga þau.
Enda með að henda þessu í tvö föll.

---------------------------------

Run after adding lamport clocks:

log: 1334 john {sending,{hello,72}}
log: 1335 george {received,{hello,92}}
log: 1335 paul {sending,{hello,87}}
log: 1336 george {received,{hello,96}}
log: 1336 john {received,{hello,87}}
log: 1336 paul {sending,{hello,70}}
log: 1337 george {received,{hello,72}}

john sends 72 at time 1334 (to george evidently)
george receives 2 messages in the meantime, george is at 1336 now
then george receives the message 72 and goes to 1337

The log is ordered by time!

When we stop the logger we still have some messages in the queue
We just log the remains from the queue one by one (queue is ordered).

---------------------------------

Vector clocks

Fannar er með vector klukku í loggernum sem er bara á sama formi og vector klukkan í workerunum.

% The clock is similar to before
% [{Name, Time}]
% Time is of the form [{john, 3}, {ringo, 2}, {paul, 4}, {george, 1}]
% So we have
% [{ringo, [{john, 3}, {ringo, 2}, {paul, 4}, {george, 1}]}]
% i.e. a list of all the most recent lists we have gotten from each node
% NOPE
% The clock should reflect what messages we have seen from each of the nodes.
% Is this not exactly what we have done in the Lamport clock solution?
% SO, the clock is the same as before:
% [{john, 3}, {ringo, 2}, {paul, 4}, {george, 1}]

The only difference is that we implement the vector clock so that it is independent from how many nodes we have in the system.

vector test run

Am logging all messages now. BUT having issues with ordering of logging

Logging received before send!
I log safe requests from queue everytime I receive a new logrequest, and after updating the clock
So I should

63> test_vect:run(500,500).
Clock: [{john,1},{ringo,1}]
log: [{ringo,1},{john,1}] ringo {received,{hello,57}}

Clock: [{john,1},{ringo,1}]
log: [{john,1}] john {sending,{hello,57}}

Clock: [{paul,1},{john,2},{ringo,1}]
log: [{paul,1}] paul {sending,{hello,68}}
Clock: [{paul,2},{john,2},{ringo,2}]
log: [{ringo,2},{john,2}] john {received,{hello,77}}
Clock: [{paul,2},{john,2},{ringo,2}]
log: [{ringo,2},{john,1}] ringo {sending,{hello,77}}
Clock: [{paul,2},{john,2},{ringo,3}]
log: [{paul,1},{ringo,3},{john,1}] ringo {received,{hello,68}}

67> test_vect:run(500,500).
WILL TRY TO LOG SAFE REQUEST, CURRENT CLOCK AND QUEUE:
Clock: [{ringo,1}]
Queue: [{log,ringo,[{ringo,1},{john,1}],{received,{hello,57}}}]
WILL TRY TO LOG SAFE REQUEST, CURRENT CLOCK AND QUEUE:
Clock: [{john,1},{ringo,1}]
Queue: [{log,ringo,[{ringo,1},{john,1}],{received,{hello,57}}},
        {log,john,[{john,1}],{sending,{hello,57}}}]
WILL LOG SAFE REQUEST, CURRENT CLOCK:
Clock: [{john,1},{ringo,1}]
log: [{ringo,1},{john,1}] ringo {received,{hello,57}}
WILL LOG SAFE REQUEST, CURRENT CLOCK:
Clock: [{john,1},{ringo,1}]
log: [{john,1}] john {sending,{hello,57}}

Can see that in the beginning we receive a received log request from ringo,
can't log that of course.
Then when we receive the sending log request from john, we can log both received and sending log request.
HOWEVER since the queue is not ordered, and the received log request is before the sending log request,
the received log request gets logged first
-> the queue needs to be ordered by timestamp!

Added sorting by timestamp, WORKING NOW

73> test_vect:run(500,500).
WILL TRY TO LOG SAFE REQUEST, CURRENT CLOCK AND QUEUE:
Clock: [{ringo,1}]
Queue: [{log,ringo,[{ringo,1},{john,1}],{received,{hello,57}}}]
WILL TRY TO LOG SAFE REQUEST, CURRENT CLOCK AND QUEUE:
Clock: [{john,1},{ringo,1}]
Queue: [{log,john,[{john,1}],{sending,{hello,57}}},
        {log,ringo,[{ringo,1},{john,1}],{received,{hello,57}}}]
WILL LOG SAFE REQUEST, CURRENT CLOCK:
Clock: [{john,1},{ringo,1}]
log: [{john,1}] john {sending,{hello,57}}
WILL LOG SAFE REQUEST, CURRENT CLOCK:
Clock: [{john,1},{ringo,1}]
log: [{ringo,1},{john,1}] ringo {received,{hello,57}}

If you run tests using the Lamport clock and the vector clock you might see some differences.
You could augment your code of the logger and do a print out every time it queues a message in the hold back queue.
Is there a difference?
Þetta meikar ekki sense ... hann queuear alltaf áður en hann prentar. Öll messages fara í queue.
Betra er að prenta út lengdina á queueinu

MaxLengthOfQueue test:
test:run(10,10).

Lamport (logger):
34
35
36
33
33
43
46
34
37
40
Average: 37.1

Vector (logger_vect):
6
6
6
7
7
6
6
6
6
6
Average: 6.2

Why does this happen?
In the Lamport clock case I have to wait for the timestamps of all workers to become equal to the timestamp on the message
I want to log, even though they may be completely causally independent from the message we are trying to log.
In the vector clock case we log a message when the time stamp of the message is less than or equal to that of the clock.
It is checking the timestamps of all the processes, like in the Lamport clock case, but the difference is that every
worker has a more up to date view of the entire system. If worker A sends a message to worker B, and worker B then sends
a message to worker C, worker C will know about the message sent from A to B.
When worker C then tries to log a message, the message from A to B will be included in the time stamp of the message
that it is trying to log. The logger then uses this timestamp to figure out if it is safe to log the message or not.
It can then say that it is safe to log it if the clock time for A is for example 10, and the clock time for B is for
example 15, but the clock time for C (the worker that is trying to log a message) is 999.
It can then log the message much sooner, than if it had to wait for the time stamps of A and B to also reach 999.

Skrifa um muninn á Lamport clocs og vector clocks ... inverse of clock condition holds ... etc

Gæti líka tekið test með overlapping worker groups ... loggerinn getur höndlað það og prentað út skv happened-before
order.

NÓG KOMIÐ UM VECTOR CLOCKS

-----------------------------------------

Skýrsludót um Lamport clocks

Run some tests and try to find log messages that are printed in the wrong order.
How do you know that they are printed in the wrong order? Experiment with the jitter and see if you can increase or
decrease (eliminate?) the number of entries that are wrong.

After adding Lamport time ...
Do some tests and identify situations where log entries are printed in the wrong order.
How do you identify messages that are in the wrong order?
What is always true and what is sometimes true? How do you play it safe?

You are also to write a report that describes your time module
(please don’t give me a page of source code, describe in your own words).
Did you detected entries out of order in the first implementation and if so, how did you detect them.
What is it that the final log tells us? Did events happen in the order presented by the log?
How large will the hold back queue be, make some tests and try to find the maximum number of entries.


