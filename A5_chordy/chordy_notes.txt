Chordy: A distributed hash table

Implement chord storage
First implementation just a ring structure
Can add nodes to the ring but not add any elements to the store

Bæta svo failure detection í kerfið
ATH að við tröckum bara einn successor en actual chordy trackar nokkra

Replication í storeinu til að replicate-a data ef nodes deyja
"That will take care of some problems but does it actually work?"

Það þarf í raun ekki finger table í network of 20 nodes
(finger tables leyfa okkur að finna any given key in log(n) hops)
(annars linear search ef þær eru ekki til staðar)

If you also want to implement mutable objects you will be faced with
a challenge. Hvernig update-ar maður object (consistently) ef hann er
replicated? Some nodes might be unavailable during node insertion and failures.
To solve this you will have to do some more reading.

-----------------------------------------------------------------------------------

1 Building a ring

Notum ekki hash function heldur bara random number sem er generated þegar new key
er generated
Engin "names" á nodes, bara random numbers sem við vonum að séu unique.
"Using a hash function such as SHA-1 would give us 160 bits and allow us to have
human readable names on object but let’s keep things simple."

Key module:
TODO
Remember that the we’re dealing with a ring so it could be that From is larger than To.
What does that mean and how do you handle it?

TODO
If you study the Chord paper you will find that they explain things slightly different.
We use our key:between/3 function that allows the key Xkey to be equal to Skey,
not strictly according to the paper.
Does this matter? What does it mean that Xkey is equal to Skey, will it ever happen?

TODO
What are the pros and cons of a more frequent stabilizing procedure?
What is delayed if we don’t do stabilizing that often?

TODO
notify/3
Do we need a special case to detect that we’re pointing to ourselves?
Do we have to inform the new node about our decision?
How will it know if we have discarded its friendly proposal?

TODO
What would happen if we didn’t schedule the stabilize procedure (when a node is started)?
Would things still work?

---------------------------------------------------------------------------------------------------

111016 0023
Eitthvað rugl í stabilize

[<0.70.0>] ENTERED STABILIZE WITH SUCCESSOR ARG AS: {notify,
                                                     {443584618,<0.70.0>}}
[<0.71.0>] ENTERED STABILIZE WITH SUCCESSOR ARG AS: {notify,
                                                     {723040206,<0.71.0>}}
[<0.72.0>] ENTERED STABILIZE WITH SUCCESSOR ARG AS: {notify,
                                                     {945816365,<0.72.0>}}
[<0.73.0>] ENTERED STABILIZE WITH SUCCESSOR ARG AS: {notify,
                                                     {501490715,<0.73.0>}}
[<0.74.0>] ENTERED STABILIZE WITH SUCCESSOR ARG AS: {notify,
                                                     {311326755,<0.74.0>}}
[<0.75.0>] ENTERED STABILIZE WITH SUCCESSOR ARG AS: {notify,
                                                     {597447525,<0.75.0>}}
[<0.70.0>] TRYING TO SEND REQUEST TO: {443584618,<0.70.0>}
[<0.71.0>] TRYING TO SEND REQUEST TO: {723040206,<0.71.0>}
[<0.72.0>] TRYING TO SEND REQUEST TO: {945816365,<0.72.0>}
[<0.73.0>] TRYING TO SEND REQUEST TO: {501490715,<0.73.0>}
[<0.74.0>] TRYING TO SEND REQUEST TO: {311326755,<0.74.0>}
[<0.75.0>] TRYING TO SEND REQUEST TO: {597447525,<0.75.0>}

=ERROR REPORT==== 11-Oct-2016::00:22:02 ===
Error in process <0.70.0> with exit value:
{badarg,[{node1,stabilize,1,[{file,"node1.erl"},{line,182}]},
         {node1,node,3,[{file,"node1.erl"},{line,81}]}]}

Vandinn var að ég var ekki að returna successor úr stabilize/3
Virðist vera að virka núna. Probe-inn fer í gegnum hækkandi röð af keys.
ATH engar ring repairs komnar í þetta

---------------------------------------------------------------------------------------------------

111016 2011
Kominn með ring up and running
"Adding a store" er næst

---------------------------------------------------------------------------------------------------

Adda í store virðist vera að virka
Búa til nodes, adda values, adda more nodes, gildi dreifast rétt

86> test:testStore2().
[<0.457.0>] Received my own probe - Created time: 1476225499697593 - Current time: 1476225499697633 - Nodes: [{912868469,
                                                                                                               <0.457.0>},
                                                                                                              {110309381,
                                                                                                               <0.458.0>},
                                                                                                              {679406574,
                                                                                                               <0.459.0>}]
[<0.458.0>] STORE: [{97462353,value4}]
[<0.457.0>] STORE: [{834748490,value1},{827307409,value3}]
[<0.459.0>] STORE: [{636626494,value2}]
[<0.457.0>] Received my own probe - Created time: 1476225529711087 - Current time: 1476225529711124 - Nodes: [{912868469,
                                                                                                               <0.457.0>},
                                                                                                              {78154561,
                                                                                                               <0.463.0>},
                                                                                                              {110309381,
                                                                                                               <0.458.0>},
                                                                                                              {174207268,
                                                                                                               <0.462.0>},
                                                                                                              {521769722,
                                                                                                               <0.464.0>},
                                                                                                              {679406574,
                                                                                                               <0.459.0>},
                                                                                                              {740003928,
                                                                                                               <0.461.0>},
                                                                                                              {867833725,
                                                                                                               <0.460.0>}]
[<0.457.0>] STORE: []
[<0.458.0>] STORE: [{97462353,value4}]
[<0.459.0>] STORE: [{636626494,value2}]
[<0.460.0>] STORE: [{834748490,value1},{827307409,value3}]
[<0.461.0>] STORE: []
[<0.462.0>] STORE: []
[<0.463.0>] STORE: []
[<0.464.0>] STORE: []
ok

-----

93> test:testStore2().
[<0.508.0>] Received my own probe - Created time: 1476226449068516 - Current time: 1476226449068529 - Nodes: [{217489552,
                                                                                                               <0.508.0>},
                                                                                                              {579315200,
                                                                                                               <0.509.0>},
                                                                                                              {946799514,
                                                                                                               <0.510.0>}]
[<0.508.0>] STORE: [{93868016,value2},{99422912,value3}]
[<0.509.0>] STORE: [{479668684,value1},{318713296,value4}]
[<0.510.0>] STORE: []
[<0.508.0>] Received my own probe - Created time: 1476226479072934 - Current time: 1476226479072975 - Nodes: [{217489552,
                                                                                                               <0.508.0>},
                                                                                                              {339507846,
                                                                                                               <0.514.0>},
                                                                                                              {579315200,
                                                                                                               <0.509.0>},
                                                                                                              {600784579,
                                                                                                               <0.513.0>},
                                                                                                              {755193177,
                                                                                                               <0.511.0>},
                                                                                                              {778618308,
                                                                                                               <0.512.0>},
                                                                                                              {824062636,
                                                                                                               <0.515.0>},
                                                                                                              {946799514,
                                                                                                               <0.510.0>}]
[<0.508.0>] STORE: [{93868016,value2},{99422912,value3}]
[<0.509.0>] STORE: [{479668684,value1}]
[<0.510.0>] STORE: []
[<0.511.0>] STORE: []
[<0.512.0>] STORE: []
[<0.513.0>] STORE: []
[<0.514.0>] STORE: [{318713296,value4}]
[<0.515.0>] STORE: []
LOOKUP RESULTS: {479668684,value1} {93868016,value2} {99422912,value3} {318713296,
                                                                        value4}
ok

gildin eru að fara á rétta staði og ég get lookupað þau aftur

---------------------------------------------------------------------------------------------------

2.6 Performance

If we now have a distributed store that can handle new nodes that are added to the ring we might
try some performance testing.

You need to be a group with several machine to do this.

Assume that we have eight machines and that we will use four in building the ring and four in testing the performance.

As a first test we can have one node only in the ring and let the four test machines add 1000 elements to the ring
and then do a lookup of the elements.

TODO
Does it take longer for one machine to handle 4000 elements rather than
four machines that do 1000 elements each. What is the limiting factor?

Implement a test procedure that adds a number of random key-value pairs into the system and keeps the keys in a list.
You should then be able to do a lookup of all the keys and measure the time it takes.
The lookup test should be given the name of a node to contact.

TODO
Now what happens if we add another node to the ring, how does the performance change?

TODO
Does it matter if all test machines access the same node?

TODO
Add two more nodes to the ring, any changes?

TODO
How will things change if we have a ten thousand elements?

PERFORMANCE TEST RESULTS
Er ekki að keyra þetta á mörgum vélum eins og hann vill

performanceTest1
1 (local) node in ring
Add 1000 keys and look them up again

2> test:performanceTest().
1000 lookup operation in 3 ms
0 lookups failed, 0 caused a timeout
ok
3> test:performanceTest().
1000 lookup operation in 3 ms
0 lookups failed, 0 caused a timeout
ok
4> test:performanceTest().
1000 lookup operation in 4 ms
0 lookups failed, 0 caused a timeout
ok
5> test:performanceTest().
1000 lookup operation in 4 ms
0 lookups failed, 0 caused a timeout
ok
6> test:performanceTest().
1000 lookup operation in 4 ms
0 lookups failed, 0 caused a timeout
ok
7> test:performanceTest().
1000 lookup operation in 4 ms
0 lookups failed, 0 caused a timeout
ok
8> test:performanceTest().
1000 lookup operation in 3 ms
0 lookups failed, 0 caused a timeout
ok
9> test:performanceTest().
1000 lookup operation in 4 ms
0 lookups failed, 0 caused a timeout
ok
10> test:performanceTest().
1000 lookup operation in 4 ms
0 lookups failed, 0 caused a timeout
ok
11> test:performanceTest().
1000 lookup operation in 3 ms
0 lookups failed, 0 caused a timeout
ok

--------------------

performanceTest2
4 nodes in ring
Add 1000 keys and lookup

15> test:performanceTest2().
1000 lookup operation in 4 ms
0 lookups failed, 0 caused a timeout
ok
16> test:performanceTest2().
1000 lookup operation in 3 ms
0 lookups failed, 0 caused a timeout
ok
17> test:performanceTest2().
1000 lookup operation in 3 ms
0 lookups failed, 0 caused a timeout
ok
18> test:performanceTest2().
1000 lookup operation in 3 ms
0 lookups failed, 0 caused a timeout
ok
19> test:performanceTest2().
1000 lookup operation in 3 ms
0 lookups failed, 0 caused a timeout
ok

No difference

--------------------

performanceTest3
1000 nodes in ring

21> test:performanceTest3().
1000 lookup operation in 7010 ms
198 lookups failed, 0 caused a timeout
ok
22> test:performanceTest3().
1000 lookup operation in 8004 ms
204 lookups failed, 0 caused a timeout
ok
23>

--------------------

performanceTest4
8 nodes in ring

24> test:performanceTest4().
1000 lookup operation in 5 ms
0 lookups failed, 0 caused a timeout
ok
25> test:performanceTest4().
1000 lookup operation in 4 ms
0 lookups failed, 0 caused a timeout
ok
26> test:performanceTest4().
1000 lookup operation in 4 ms
0 lookups failed, 0 caused a timeout
ok
27> test:performanceTest4().
1000 lookup operation in 4 ms
0 lookups failed, 0 caused a timeout
ok
28> test:performanceTest4().
1000 lookup operation in 3 ms
0 lookups failed, 0 caused a timeout
ok
29> test:performanceTest4().
1000 lookup operation in 5 ms
0 lookups failed, 0 caused a timeout
ok
30> test:performanceTest4().
1000 lookup operation in 4 ms
0 lookups failed, 0 caused a timeout
ok
31> test:performanceTest4().
1000 lookup operation in 4 ms
0 lookups failed, 0 caused a timeout
ok
32> test:performanceTest4().
1000 lookup operation in 4 ms 
0 lookups failed, 0 caused a timeout
ok
33> test:performanceTest4().
1000 lookup operation in 3 ms
0 lookups failed, 0 caused a timeout
ok

TODO Make multiple processes add 1000 elements at the same time, simulate many computers




